'use strict';

// -----------------------------------------------
// Module for token handling. Tokens are of two types
// 1) Access and refresh tokens - either generated by us for local auth
// or generated by the Oauth provider for 3rd party auth. We usually use the
// variable name 'token' for these tokens.
// 2) JWT tokens - always generated by us and used to wrap up any session data
// eg. session, token and user information, which we return to the client. We
// usually use the variable name 'jwt' for these.
// -----------------------------------------------

const Jwt = require('jsonwebtoken'); // library to create Json Web Tokens

const Session = require('./session'); // for sessions

// -----------------------------------------------
// Create a JWT token. Takes the user profile and access/refresh tokens as
// input. It reates a login session and also wraps up some data along with an 
// expiry duration and signs it to generate the Jwt
// -----------------------------------------------
module.exports.createJwt = (userProfile, token) => {       
    // Create a login session for this user and save it in the cache
    Session.create (userProfile, token);
    
    // Secret key used for signing the Jwt
    const secretKey = 'NeverShareYourSecret';

    return Jwt.sign(
        {
            // Data wrapped in the Jwt
            userId: userProfile.userId,
            access: token.access  
        }, 
        secretKey, 
        {
            // Expiry duration for the Jwt
            expiresIn: token.expiry 
        }
    );
}

// -----------------------------------------------
// Function called by the JWT auth module to validate the Jwt received in the
// request. The JWT auth module decodes the incoming Jwt using the secret and
// verifies that it has not been tampered. It also verifies that the Jwt has
// not expired. Then it calls our validation function for any custom validation.
// Our function receives the decoded data that we had wrapped into the Jwt.
// Our function is called asynchronously and also receives a callback function. 
// When we finish validation we have to call this callback function. All of our 
// downstream validation actions are also asynchronous so we pass in another 
// callback to those downstream actions resulting in a series of callback 
// functions.
// -----------------------------------------------
module.exports.validateJwt = (decoded, request, callback) => {
    // Get the data fields that we had wrapped when we created the Jwt 
    const {userId, access} = decoded;
    
    // Use that data to validate the session. This also happens asynchronously
    // so we pass it a callback function
    Session.validate (userId, access,    
        // Our callback is called when the session validation is completed. We
        // in turn call the original callback 
        (userProfile) => {
            if (userProfile) {
                // Received a user profile which means the session is validated
                // So we call the original callback with a True
                
                // After the validation is completed, the normal processing of the
                // request happens by calling the handler for the route. The 
                // decoded token can be accessed there via request.auth.credentials
                // However if you want to pass on additional information to be
                // available in the request handler you can set it as the third
                // parameter to the callback below. That object will then be
                // available in the request.auth.credentials
                const {scope} = userProfile;
                decoded.scope = userProfile.scope;
                decoded.userName = userProfile.userName;
                return callback(null, true, decoded);
            }
            else {
                // The session was not validated so we call the original
                // callback with a False
                return callback(null, false);
            }            
        }
    );    
};

// -----------------------------------------------
// Delete the Session. Nothing to delete for the JWT token
// -----------------------------------------------
module.exports.deleteJwt = (userId, access) => {       
    // Delete the session from the cache
    Session.delete (userId, access);
}

// -----------------------------------------------
// Create a token object containing access and refresh tokens with an expiry
// time. Used during local auth.
// TODO Create a real access and refresh token
// -----------------------------------------------
var accessTokenId = 1;
var refreshTokenId = 1000;
module.exports.create = (userProfile) => {
    const token = {
        access: ++accessTokenId,
        expiry: '1h', // expires in 1 hour
        refresh: ++refreshTokenId
    };

    return token;
}


